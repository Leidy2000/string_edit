#include <iostream>
#include <algorithm>
using namespace std;

int main()
{
    int n, m;
    cin>>n>>m;
    int **C = new int* [n];
    for(int i = 0; i < n; i++)
        C[i] = new int [m];
    int *D = new int [n];
    int *I = new int [m];
    int **dp = new int* [n + 1];
    for(int i = 0; i <= n; i++)
        dp[i] = new int [m + 1];

    cout<<"请输入C(i, j)："<<endl;
    for(int i = 0; i < n; i++)
        for(int j = 0; j < m; j++)
            cin>>C[i][j];

    cout<<"请输入D(i)："<<endl;
    for(int i = 0; i < n; i++)
        cin>>D[i];

    cout<<"请输入I(j)："<<endl;
    for(int i = 0; i < m; i++)
        cin>>I[i];

    string a, b;
    cin >> a >> b;

    dp[0][0] = 0;
    for(int i = 0; i < n; i++){
        int cur = 0;
        for(int j = 0; j <= i; j++){
            cur += D[j];
        }
        dp[i + 1][0] = cur;
    }
    for(int i = 0; i < m; i++){
        int cur = 0;
        for(int j = 0; j <= i; j++){
            cur += I[j];
        }
        dp[0][i + 1] = cur;
    }

    for(int i = 1; i <= n; i++){
        for(int j = 1; j <= m; j++){
            if(a[i - 1] != b[j - 1])
                dp[i][j] = dp[i - 1][j - 1] + C[i - 1][j - 1];
            else
                dp[i][j] = dp[i - 1][j - 1];

            dp[i][j] = min(dp[i][j], dp[i - 1][j] + D[i - 1]);
            dp[i][j] = min(dp[i][j], dp[i][j - 1] + I[j - 1]);
        }
    }
    for(int i = 0; i <= n; i++){
        for(int j = 0; j <= m; j++){
            cout<<dp[i][j]<<" ";
        }
        cout<<endl;
    }
    cout<<"最少消耗为："<<dp[n][m]<<endl;

    return 0;
}

/*测试数据...待补充
7 5
1 2 3 4 5 6 7
8 9 10 11 12 13 14
15 16 2 41 14 82 12
1 2 3 4 5 6 7
8 6 5 4 21 12 2
1 13 3 2 1 5 6
10 5 8 9 15
ab12cd5
abcdf

7

3 3
1 2 3
8 9 10
15 16 2
1 13 3 
10 5 8 
ab1
ab1

0
*/

